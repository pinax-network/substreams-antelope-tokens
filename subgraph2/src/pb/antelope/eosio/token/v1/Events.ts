// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Transfer } from "./Transfer";
import { Issue } from "./Issue";
import { Retire } from "./Retire";
import { Create } from "./Create";
import { BalanceChange } from "./BalanceChange";
import { SupplyChange } from "./SupplyChange";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const transfers = message.transfers;
    for (let i: i32 = 0; i < transfers.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Transfer.encode(transfers[i], writer);
      writer.ldelim();
    }

    const issues = message.issues;
    for (let i: i32 = 0; i < issues.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Issue.encode(issues[i], writer);
      writer.ldelim();
    }

    const retires = message.retires;
    for (let i: i32 = 0; i < retires.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Retire.encode(retires[i], writer);
      writer.ldelim();
    }

    const creates = message.creates;
    for (let i: i32 = 0; i < creates.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Create.encode(creates[i], writer);
      writer.ldelim();
    }

    const balanceChanges = message.balanceChanges;
    for (let i: i32 = 0; i < balanceChanges.length; ++i) {
      writer.uint32(42);
      writer.fork();
      BalanceChange.encode(balanceChanges[i], writer);
      writer.ldelim();
    }

    const supplyChanges = message.supplyChanges;
    for (let i: i32 = 0; i < supplyChanges.length; ++i) {
      writer.uint32(50);
      writer.fork();
      SupplyChange.encode(supplyChanges[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transfers.push(Transfer.decode(reader, reader.uint32()));
          break;

        case 2:
          message.issues.push(Issue.decode(reader, reader.uint32()));
          break;

        case 3:
          message.retires.push(Retire.decode(reader, reader.uint32()));
          break;

        case 4:
          message.creates.push(Create.decode(reader, reader.uint32()));
          break;

        case 5:
          message.balanceChanges.push(
            BalanceChange.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.supplyChanges.push(
            SupplyChange.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transfers: Array<Transfer>;
  issues: Array<Issue>;
  retires: Array<Retire>;
  creates: Array<Create>;
  balanceChanges: Array<BalanceChange>;
  supplyChanges: Array<SupplyChange>;

  constructor(
    transfers: Array<Transfer> = [],
    issues: Array<Issue> = [],
    retires: Array<Retire> = [],
    creates: Array<Create> = [],
    balanceChanges: Array<BalanceChange> = [],
    supplyChanges: Array<SupplyChange> = []
  ) {
    this.transfers = transfers;
    this.issues = issues;
    this.retires = retires;
    this.creates = creates;
    this.balanceChanges = balanceChanges;
    this.supplyChanges = supplyChanges;
  }
}
